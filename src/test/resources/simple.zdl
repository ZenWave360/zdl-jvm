/**
* Global javadoc comment
*/

MAX_LENGTH=100

config {
  key value
  persistence jpa
  database mysql
}

apis {

  /** Customer API javadoc comment */
  asyncapi(client) BASA {
    uri 'classpath:/basa-asyncapi.yml'
    consumerPackage 'com.basa.consumer'
    modelPackage 'com.basa.model'
  }
}


/**
  *
  } Customer javadoc comment
*/
@aggregate
@service(CustomerService)
@object({size: 10, limit: 100})
@array([1, 2, 3])
@array2(1, 2, 3)
entity Customer {
  username String required unique min(5)
  tags String[]
  email String required unique max(MAX_LENGTH)
}

/**
Enum javadoc comment
*/
enum OrderStatus {
  NEW(1) /** new order */,  IN_PROGRESS(2) /** order in progress */,
  /** order completed */
  COMPLETED("3")
  /**
    * order cancelled
    */
  CANCELLED('4')
}

@input
entity CustomerEntityInput {
  username String required unique
  tags String[]
  email String required unique
}

//relationship OneToMany {
//	Customer{shipmentDetails} to ShippingDetails{customer}
//	Customer{paymentDetails} to PaymentDetails{customer}
//}

relationship ManyToOne {
  /** shipment details */
  ShippingDetails{customer} to
  /** customer */
  Customer{shipmentDetails}

  PaymentDetails{customer} to Customer{paymentDetails}

  CustomerOrder{paymentDetails} to PaymentDetails
  CustomerOrder{customer} to Customer
}

relationship ManyToMany {
  CustomerOrder{orderedItems} to OrderedItem{customerOrders}
}

/**
 * Customer input javadoc comment
 */
@copy(Customer)
input CustomerInput {
  username String required unique
  tags String[]
  email String required unique pattern(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/)
  address AddressInput {
    street String
    city String
    state String
    zip String
  }
}

output CustomerDTO {
  username String
  email String
}

service Customer, CustomerOrder with CustomerLegacyServer

/**
Service javadoc comment
*/
@rest("/customers")
service CustomerService for (Customer) {
    /**
     * Create customer javadoc comment
     */
    @post("/customers")
    @asyncapi({ api: "BASA", operationId: "createCustomer"})
    @query({api: "doxis", operationId: "createCustomer"})
    createCustomer(CustomerInput) Customer withEvents CustomerEvent [CustomerCreated|CustomerCreatedFailed]

    @put("/customers/{customerId}")
    updateCustomer(CustomerInput) Customer withEvents CustomerEvent CustomerUpdated /** update customer javadoc comment */

    @delete("/customers/{customerId}")
    deleteCustomer(id) withEvents CustomerDeleted

    @get("/customers/{customerId}")
    getCustomer(id) Customer

    @get({path: "/customers", params: {search: "string"}})
    @pageable
    listCustomers() Customer[]
}

@topic(tratra)
event CustomerCreated (customerEvents) {
  customerId String
  customer Customer
}

@topic(tratra)
event CustomerUpdated(customerEvents) {
  customerId String
  customer CustomerPayload {
    username String
    tags String[]
    email String
  }
}

@topic(tratra)
event CustomerDeleted {
  customerId String
}


@entity(Customer)
event CustomerEvent(customerEvent) {

}
